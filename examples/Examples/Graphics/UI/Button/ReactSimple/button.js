// Generated by psc version 0.6.8
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    
    /**
     *  | Addition and multiplication
     */
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    
    /**
     *  | Addition, multiplication, and subtraction
     */
    var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
        this["-"] = $minus;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $less$hash$greater = function (__dict_Functor_1) {
        return function (fa) {
            return function (f) {
                return $less$dollar$greater(__dict_Functor_1)(f)(fa);
            };
        };
    };
    
    /**
     *  | Addition, multiplication, and subtraction
     */
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    
    /**
     *  | Addition and multiplication
     */
    var $plus = function (dict) {
        return dict["+"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var $hash = function (x) {
        return function (f) {
            return f(x);
        };
    };
    
    /**
     *  | Addition and multiplication
     */
    var zero = function (dict) {
        return dict.zero;
    };
    var unit = {};
    var showNumber = new Show(showNumberImpl);
    var show = function (dict) {
        return dict.show;
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupString = new Semigroup(concatString);
    var ringNumber = new Ring(numSub, function () {
        return semiringNumber;
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var negate = function (__dict_Ring_6) {
        return function (a) {
            return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
        };
    };
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var functorArr = new Functor($less$less$less(semigroupoidArr));
    
    /**
     *  | Flips the order of the arguments to a function of two arguments.
     */
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    
    /**
     *  | Returns its first argument and ignores its second.
     */
    var $$const = function (_41) {
        return function (_42) {
            return _41;
        };
    };
    var $$void = function (__dict_Functor_10) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_10)($$const(unit))(fa);
        };
    };
    var applyArr = new Apply(function (f) {
        return function (g) {
            return function (x) {
                return f(x)(g(x));
            };
        };
    }, function () {
        return functorArr;
    });
    var bindArr = new Bind(function (m) {
        return function (f) {
            return function (x) {
                return f(m(x))(x);
            };
        };
    }, function () {
        return applyArr;
    });
    var applicativeArr = new Applicative(function () {
        return applyArr;
    }, $$const);
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_5) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_4) {
                        return $$return(__dict_Monad_16)(_5(_4));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        Semigroup: Semigroup, 
        Ring: Ring, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        negate: negate, 
        "-": $minus, 
        zero: zero, 
        "+": $plus, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "void": $$void, 
        "<#>": $less$hash$greater, 
        "<$>": $less$dollar$greater, 
        show: show, 
        "#": $hash, 
        "$": $dollar, 
        "<<<": $less$less$less, 
        "const": $$const, 
        flip: flip, 
        semigroupoidArr: semigroupoidArr, 
        showNumber: showNumber, 
        functorArr: functorArr, 
        applyArr: applyArr, 
        applicativeArr: applicativeArr, 
        bindArr: bindArr, 
        semiringNumber: semiringNumber, 
        ringNumber: ringNumber, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function runFn2(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    }
    ;
    
    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;
    
    function runFn4(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fn(a, b, c, d);
            };
          };
        };
      };
    }
    ;
    return {
        runFn4: runFn4, 
        runFn3: runFn3, 
        runFn2: runFn2
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function unsafeInterleaveEff(f) {
      return f;
    }
    ;
    return {
        unsafeInterleaveEff: unsafeInterleaveEff
    };
})();
var PS = PS || {};
PS.React = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var DOM = PS.DOM;
    var React_Types = PS.React_Types;
    var spec = {};;
    
    function createClass(psSpec) {
      var spec = {};
      for (var fun in psSpec) {
        if (psSpec.hasOwnProperty(fun)) {
          (function(f) {
            if (typeof psSpec[f] === 'function') {
              spec[f] = function() {
                return psSpec[f].apply(this, [this].concat([].slice.call(arguments)))() ;
              }
            } else {
              spec[f] = psSpec[f];
            }
          })(fun);
        }
      }
      var Class = React.createClass(spec);
      return function(props) {
        return function(children) {
          return Class(props, children);
        }
      }
    };
    
    function renderComponent(component) {
      return function(element) {
        return function() {
          return React.renderComponent(component, element);
        }
      }
    };
    
    function eventHandler(that) {
      return function(f) {
        return function(e) {
          return f(that)(e)();
        }
      }
    };
    var renderComponentById = function (component) {
        return function (id) {
            return renderComponent(component)(document.getElementById(id));
        };
    };
    return {
        renderComponentById: renderComponentById, 
        renderComponent: renderComponent, 
        spec: spec, 
        eventHandler: eventHandler, 
        createClass: createClass
    };
})();
var PS = PS || {};
PS.React_DOM = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Function = PS.Data_Function;
    var React_Types = PS.React_Types;
    
    function dom(el) {
      return function(props) {
        return function(children) {
          return React.DOM[el].apply(this, [props].concat(children));
        }
      }
    };
    
    function rawText(text) {
      return text;
    };
    var span = dom("span");
    var div = dom("div");
    var button = dom("button");
    return {
        span: span, 
        div: div, 
        button: button, 
        rawText: rawText, 
        dom: dom
    };
})();
var PS = PS || {};
PS.Signal = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function constant(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };
    
  function mapP(constant, fun, sig) {
    var out = constant(fun(sig.get()));
    sig.subscribe(function(val) { out.set(fun(val)); });
    return out;
  };
    
  function foldpP(constant, fun, seed, sig) {
    var acc = seed;
    var out = constant(acc);
    sig.subscribe(function(val) {
      acc = fun(val)(acc);
      out.set(acc);
    });
    return out;
  };
    
  function runSignal(sig) {
    return function() {
      sig.subscribe(function(val) {
        val();
      });
      return {};
    };
  };
    var map = Data_Function.runFn3(mapP)(constant);
    var functorSignal = new Prelude.Functor(map);
    var foldp = Data_Function.runFn4(foldpP)(constant);
    return {
        runSignal: runSignal, 
        foldp: foldp, 
        map: map, 
        constant: constant, 
        functorSignal: functorSignal
    };
})();
var PS = PS || {};
PS.Signal_Channel = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Signal = PS.Signal;
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function channelP(constant, v) {
    return function() {
      return constant(v);
    };
  };
    
  function sendP(chan, v) {
    return function() {
      chan.set(v);
    };
  };
    
  function subscribe(chan) {
    return chan;
  };
    var send = Data_Function.runFn2(sendP);
    var channel = Data_Function.runFn2(channelP)(Signal.constant);
    return {
        subscribe: subscribe, 
        send: send, 
        channel: channel
    };
})();
var PS = PS || {};
PS.Graphics_UI = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Graphics_UI_Color_Name = PS.Graphics_UI_Color_Name;
    var Graphics_UI_Color_RGB = PS.Graphics_UI_Color_RGB;
    
    /**
     *  | We can interact with a UI through an event.
     */
    var Button = function (button) {
        this.button = button;
    };
    
    /**
     *  | We can vertically align multiple UI's
     */
    var GroupVertical = function (groupVertical) {
        this.groupVertical = groupVertical;
    };
    
    /**
     *  | We can horizontally align multiple UI's
     */
    var GroupHorizontal = function (groupHorizontal) {
        this.groupHorizontal = groupHorizontal;
    };
    
    /**
     *  | We can set the height of a UI.
     */
    var Height = function (height) {
        this.height = height;
    };
    
    /**
     *  | We can make a text UI.
     */
    var Text = function (text) {
        this.text = text;
    };
    
    /**
     *  | We can set the width of a UI.
     */
    var Width = function (width) {
        this.width = width;
    };
    
    /**
     *  | We can set the width of a UI.
     */
    var width = function (dict) {
        return dict.width;
    };
    
    /**
     *  | We can make a text UI.
     */
    var text = function (dict) {
        return dict.text;
    };
    
    /**
     *  | We can set the height of a UI.
     */
    var height = function (dict) {
        return dict.height;
    };
    
    /**
     *  | We can vertically align multiple UI's
     */
    var groupVertical = function (dict) {
        return dict.groupVertical;
    };
    
    /**
     *  | We can horizontally align multiple UI's
     */
    var groupHorizontal = function (dict) {
        return dict.groupHorizontal;
    };
    
    /**
     *  | We can interact with a UI through an event.
     */
    var button = function (dict) {
        return dict.button;
    };
    return {
        Width: Width, 
        Text: Text, 
        Height: Height, 
        GroupHorizontal: GroupHorizontal, 
        GroupVertical: GroupVertical, 
        Button: Button, 
        width: width, 
        text: text, 
        height: height, 
        groupHorizontal: groupHorizontal, 
        groupVertical: groupVertical, 
        button: button
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    var functorArray = new Prelude.Functor(map);
    return {
        map: map, 
        functorArray: functorArray
    };
})();
var PS = PS || {};
PS.Examples_Graphics_UI_Button = (function () {
    "use strict";
    var Signal_Channel = PS.Signal_Channel;
    var Prelude = PS.Prelude;
    var Graphics_UI = PS.Graphics_UI;
    var Signal = PS.Signal;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Array = PS.Data_Array;
    
    /**
     *   | Something to note here.
     *       |
     *       | * We're using the `Monad` instance for functions
     *       |   so we don't have to pass around the argument.
     *       |   We could have used `Reader` here, but no point in another dependency.
     *   
     *   | We create a "constraint synonym",
     *       | so that we don't have to pass around this laundry list of constraints.
     *   
     */
    var Display = function (__superclass_Graphics$dotUI$dotButton_0, __superclass_Graphics$dotUI$dotGroupHorizontal_1, __superclass_Graphics$dotUI$dotGroupVertical_2, __superclass_Graphics$dotUI$dotHeight_3, __superclass_Graphics$dotUI$dotText_4, __superclass_Graphics$dotUI$dotWidth_5) {
        this["__superclass_Graphics.UI.Button_0"] = __superclass_Graphics$dotUI$dotButton_0;
        this["__superclass_Graphics.UI.GroupHorizontal_1"] = __superclass_Graphics$dotUI$dotGroupHorizontal_1;
        this["__superclass_Graphics.UI.GroupVertical_2"] = __superclass_Graphics$dotUI$dotGroupVertical_2;
        this["__superclass_Graphics.UI.Height_3"] = __superclass_Graphics$dotUI$dotHeight_3;
        this["__superclass_Graphics.UI.Text_4"] = __superclass_Graphics$dotUI$dotText_4;
        this["__superclass_Graphics.UI.Width_5"] = __superclass_Graphics$dotUI$dotWidth_5;
    };
    
    /**
     *  | Display the value in the channel.
     */
    var value = function (__dict_Display_120) {
        return Prelude[">>="](Prelude.bindArr)(Prelude["<<<"](Prelude.semigroupoidArr)(Signal.foldp(Prelude["+"](Prelude.semiringNumber))(0))(Signal_Channel.subscribe))(function (_11) {
            return Prelude.pure(Prelude.applicativeArr)(Prelude["<#>"](Signal.functorSignal)(_11)(function (n) {
                return Graphics_UI.text(__dict_Display_120["__superclass_Graphics.UI.Text_4"]())("Value: " + Prelude.show(Prelude.showNumber)(n));
            }));
        });
    };
    
    /**
     *  | Create a channel for the numbers.
     */
    var nums = Signal_Channel.channel(0);
    
    /**
     *  Helper for buttons.
     */
    var augment = function (__dict_Display_121) {
        return function (label) {
            return function (n) {
                return Prelude[">>="](Prelude.bindArr)(Prelude.flip(Signal_Channel.send)(n))(function (_10) {
                    var but = Graphics_UI.height(__dict_Display_121["__superclass_Graphics.UI.Height_3"]())(50)(Graphics_UI.width(__dict_Display_121["__superclass_Graphics.UI.Width_5"]())(100)(Graphics_UI.button(__dict_Display_121["__superclass_Graphics.UI.Button_0"]())(label)(_10)));
                    return Prelude.pure(Prelude.applicativeArr)(but);
                });
            };
        };
    };
    
    /**
     *  | The decrement button.
     */
    var decrement = function (__dict_Display_122) {
        return augment(__dict_Display_122)("Decrement")(-1);
    };
    
    /**
     *  | The increment button.
     */
    var increment = function (__dict_Display_123) {
        return augment(__dict_Display_123)("Increment")(1);
    };
    
    /**
     *  | Create our actual ui.
     */
    var ui = function (__dict_Display_124) {
        return Prelude[">>="](Prelude.bindArr)(value(__dict_Display_124))(function (_14) {
            return Prelude[">>="](Prelude.bindArr)(decrement(__dict_Display_124))(function (_13) {
                return Prelude[">>="](Prelude.bindArr)(increment(__dict_Display_124))(function (_12) {
                    return Prelude.pure(Prelude.applicativeArr)(Prelude["<#>"](Signal.functorSignal)(_14)(function (val) {
                        return Graphics_UI.groupVertical(__dict_Display_124["__superclass_Graphics.UI.GroupVertical_2"]())([ val, Graphics_UI.groupHorizontal(__dict_Display_124["__superclass_Graphics.UI.GroupHorizontal_1"]())([ _12, _13 ]) ]);
                    }));
                });
            });
        });
    };
    
    /**
     *  | Wire together the ui, channel, and renderer.
     */
    var display = function (__dict_Display_125) {
        return function (renderer) {
            return function __do() {
                var _15 = nums();
                return Signal.runSignal(Prelude["<$>"](Signal.functorSignal)(renderer)(ui(__dict_Display_125)(_15)))();
            };
        };
    };
    return {
        Display: Display, 
        display: display
    };
})();
var PS = PS || {};
PS.Graphics_UI_Interpreter_ReactSimple = (function () {
    "use strict";
    var React = PS.React;
    var Prelude = PS.Prelude;
    var React_DOM = PS.React_DOM;
    var Control_Monad_Eff_Unsafe = PS.Control_Monad_Eff_Unsafe;
    var Data_Function = PS.Data_Function;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Array = PS.Data_Array;
    var DOM = PS.DOM;
    var Graphics_UI = PS.Graphics_UI;
    var React_Types = PS.React_Types;
    
    var cloneWithProps = window.React.addons.cloneWithProps;
  ;
    var widthComponent = new Graphics_UI.Width(function (h) {
        return function (comp) {
            return cloneWithProps(comp, {
                style: {
                    display: "inline-block", 
                    width: Prelude.show(Prelude.showNumber)(h) + "px"
                }
            });
        };
    });
    var textComponent = new Graphics_UI.Text(function (str) {
        return React.createClass((function () {
            var _830 = {};
            for (var _831 in React.spec) {
                if (React.spec.hasOwnProperty(_831)) {
                    _830[_831] = React.spec[_831];
                };
            };
            _830.render = function ($$this) {
                return Prelude.pure(Control_Monad_Eff.applicativeEff)(React_DOM.span({
                    style: $$this.props.style
                })([ React_DOM.rawText($$this.props.text) ]));
            };
            return _830;
        })())({
            style: {}, 
            text: str
        })([  ]);
    });
    var heightComponent = new Graphics_UI.Height(function (h) {
        return function (comp) {
            return cloneWithProps(comp, {
                style: {
                    display: "inline-block", 
                    height: Prelude.show(Prelude.showNumber)(h) + "px"
                }
            });
        };
    });
    var groupVerticalComponent = new Graphics_UI.GroupVertical(function (comps) {
        return React_DOM.div({})(Prelude["<#>"](Data_Array.functorArray)(comps)(function (comp) {
            return React_DOM.div({})([ comp ]);
        }));
    });
    var groupHorizontalComponent = new Graphics_UI.GroupHorizontal(React_DOM.span({}));
    var buttonComponent = new Graphics_UI.Button(function (label) {
        return function (ev) {
            return React.createClass((function () {
                var _832 = {};
                for (var _833 in React.spec) {
                    if (React.spec.hasOwnProperty(_833)) {
                        _832[_833] = React.spec[_833];
                    };
                };
                _832.render = function ($$this) {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)(React_DOM.button({
                        onClick: React.eventHandler($$this)(function (t) {
                            return function (e) {
                                return Control_Monad_Eff_Unsafe.unsafeInterleaveEff(ev);
                            };
                        }), 
                        style: $$this.props.style
                    })([ React_DOM.rawText(label) ]));
                };
                return _832;
            })())({
                style: {}
            })([  ]);
        };
    });
    return {
        cloneWithProps: cloneWithProps, 
        buttonComponent: buttonComponent, 
        groupHorizontalComponent: groupHorizontalComponent, 
        groupVerticalComponent: groupVerticalComponent, 
        heightComponent: heightComponent, 
        textComponent: textComponent, 
        widthComponent: widthComponent
    };
})();
var PS = PS || {};
PS.Examples_Graphics_UI_Button_ReactSimple = (function () {
    "use strict";
    var Examples_Graphics_UI_Button = PS.Examples_Graphics_UI_Button;
    var Prelude = PS.Prelude;
    var React = PS.React;
    var Graphics_UI_Interpreter_ReactSimple = PS.Graphics_UI_Interpreter_ReactSimple;
    var React_Types = PS.React_Types;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var displayComponent = new Examples_Graphics_UI_Button.Display(function () {
        return Graphics_UI_Interpreter_ReactSimple.buttonComponent;
    }, function () {
        return Graphics_UI_Interpreter_ReactSimple.groupHorizontalComponent;
    }, function () {
        return Graphics_UI_Interpreter_ReactSimple.groupVerticalComponent;
    }, function () {
        return Graphics_UI_Interpreter_ReactSimple.heightComponent;
    }, function () {
        return Graphics_UI_Interpreter_ReactSimple.textComponent;
    }, function () {
        return Graphics_UI_Interpreter_ReactSimple.widthComponent;
    });
    var main = Examples_Graphics_UI_Button.display(displayComponent)(function (comp) {
        return Prelude["void"](Control_Monad_Eff.functorEff)(React.renderComponentById(comp)("content"));
    });
    return {
        main: main, 
        displayComponent: displayComponent
    };
})();
PS.Examples_Graphics_UI_Button_ReactSimple.main();

